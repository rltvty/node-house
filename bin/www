#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-house:server');
var http = require('http');
var eventServer = require('../event-server');
var WebSocketClient = require('websocket').client;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var eServer = eventServer(server);



var audioClient = new WebSocketClient();

audioClient.on('connectFailed', function(error) {
    console.log('Audio Connect Error: ' + error.toString());
});

audioClient.on('connect', function(connection) {
    console.log('Audio WebSocket Client Connected');
    connection.on('error', function(error) {
        console.log("Audio Connection Error: " + error.toString());
    });
    connection.on('close', function() {
        console.log('audio echo-protocol Connection Closed');
    });
    connection.on('message', function(message) {
        if (message.type === 'utf8') {
            eServer.sendEvent(JSON.parse(message.utf8Data));
        }
    });
});

audioClient.connect('ws://localhost:3002/', 'event-stream');

var lightsClient = new WebSocketClient();

lightsClient.on('connectFailed', function(error) {
    console.log('lights Connect Error: ' + error.toString());
});

lightsClient.on('connect', function(connection) {
    console.log('lights WebSocket Client Connected');
    connection.on('error', function(error) {
        console.log("lights Connection Error: " + error.toString());
    });
    connection.on('close', function() {
        console.log('lights echo-protocol Connection Closed');
    });
    connection.on('message', function(message) {
        if (message.type === 'utf8') {
            eServer.sendEvent(JSON.parse(message.utf8Data));
        }
    });
});

lightsClient.connect('ws://localhost:3001/', 'event-stream');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


